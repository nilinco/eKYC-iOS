// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name eKYC
import AVFoundation
import CommonCrypto
import CommonCrypto.CommonDigest
import CoreML
import Foundation
import ImageIO
import Photos
import Security
import Swift
import UIKit
import Vision
@_exported import eKYC
public enum UserSignError : Swift.Int, Swift.CaseIterable {
  case CantExportSign
  case CantConvertToData
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [eKYC.UserSignError]
  public typealias RawValue = Swift.Int
  public static var allCases: [eKYC.UserSignError] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol UserSignDelegate {
  func sendBackUserSign(base64: Swift.String?, imageData: Foundation.Data)
  func sendBackError(type: eKYC.UserSignError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UserSignView : eKYC.BaseView {
  public var delegate: eKYC.UserSignDelegate?
  public func capturePhoto()
  public func redoSign()
  @objc deinit
}
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
  case x509CertificateFailed
}
public enum ChecksumError : Swift.Error {
  case unusableSource
  case unknown
  public static func == (a: eKYC.ChecksumError, b: eKYC.ChecksumError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FaceCapturingError : Swift.Int, Swift.CaseIterable {
  case CantCompressVideo
  case VideoOutputDosentWork
  case AudioOutputDosentWork
  case FailedToRecordVideo
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [eKYC.FaceCapturingError]
  public typealias RawValue = Swift.Int
  public static var allCases: [eKYC.FaceCapturingError] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol FaceCapturingDelegate {
  func sendVideoURL(url: Foundation.URL?, words: Swift.String?)
  func sendBackError(type: eKYC.FaceCapturingError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FaceCapturingView : eKYC.BaseView {
  public var delegate: eKYC.FaceCapturingDelegate?
  public var waitingStatus: ((Swift.Bool) -> Swift.Void)?
  @objc override dynamic public func layoutSubviews()
  public func recordVideo()
  @objc deinit
}
extension FaceCapturingView : AVFoundation.AVCaptureFileOutputRecordingDelegate {
  @objc dynamic public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection], error: Swift.Error?)
}
extension UIImageView {
  public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  public func loadGif(asset: Swift.String)
}
public typealias CompletionHandler = (Swift.Result<Swift.String, eKYC.ChecksumError>) -> Swift.Void
public typealias MultipleCompletionHandler = (Swift.Result<[eKYC.ChecksumResult], eKYC.ChecksumError>) -> Swift.Void
public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
public typealias ChecksumResult = (checksumable: eKYC.Checksumable, checksum: Swift.String?)
extension String : eKYC.Checksumable {
}
extension Data : eKYC.Checksumable {
}
extension URL : eKYC.Checksumable {
}
extension Checksumable {
  public func checksum(algorithm: eKYC.DigestAlgorithm, chunkSize: eKYC.Chunksize = .normal, queue: Dispatch.DispatchQueue = .main, progress: eKYC.ProgressHandler? = nil, completion: @escaping eKYC.CompletionHandler)
  public func checksum(algorithm: eKYC.DigestAlgorithm, chunkSize: eKYC.Chunksize = .normal) -> Swift.String?
}
extension Array where Element : eKYC.Checksumable {
  public func checksum(algorithm: eKYC.DigestAlgorithm, chunkSize: eKYC.Chunksize = .normal, queue: Dispatch.DispatchQueue = .main, progress: eKYC.ProgressHandler? = nil, completion: @escaping eKYC.MultipleCompletionHandler)
}
public enum Directions : Swift.Int, Swift.CaseIterable {
  case Smile
  case Top
  case Down
  case Left
  case Right
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [eKYC.Directions]
  public typealias RawValue = Swift.Int
  public static var allCases: [eKYC.Directions] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: eKYC.Signature.DigestType, b: eKYC.Signature.DigestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
public protocol Checksumable {
  var hashValue: Swift.Int { get }
  func checksum(algorithm: eKYC.DigestAlgorithm, chunkSize: eKYC.Chunksize, queue: Dispatch.DispatchQueue, progress: eKYC.ProgressHandler?, completion: @escaping eKYC.CompletionHandler)
}
public class ClearMessage : eKYC.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  convenience public init(string: Swift.String, using encoding: Swift.String.Encoding) throws
  public func string(encoding: Swift.String.Encoding) throws -> Swift.String
  public func encrypted(with key: eKYC.PublicKey, padding: eKYC.Padding) throws -> eKYC.EncryptedMessage
  public func signed(with key: eKYC.PrivateKey, digestType: eKYC.Signature.DigestType) throws -> eKYC.Signature
  public func verify(with key: eKYC.PublicKey, signature: eKYC.Signature, digestType: eKYC.Signature.DigestType) throws -> Swift.Bool
  @objc deinit
}
public class EncryptedMessage : eKYC.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public func decrypted(with key: eKYC.PrivateKey, padding: eKYC.Padding) throws -> eKYC.ClearMessage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class eKYCManager {
  public static let shared: eKYC.eKYCManager
  public func setupKey(base64Key: Swift.String?)
  @objc deinit
}
public enum Chunksize {
  case tiny
  case small
  case normal
  case large
  case huge
  case custom(size: Swift.Int)
}
public enum FaceDetectionResults {
  case action(step: eKYC.Directions, didCorrect: Swift.Bool)
  case Failed
  case Completed
}
public enum FaceDetectionError : Swift.Int, Swift.CaseIterable {
  case CantCalculateChecksum
  case CantConvertToData
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [eKYC.FaceDetectionError]
  public typealias RawValue = Swift.Int
  public static var allCases: [eKYC.FaceDetectionError] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol FaceDetectionDelegate {
  func sendBackUserStatus(result: eKYC.FaceDetectionResults)
  func sendBackError(type: eKYC.FaceDetectionError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FaceDetectionView : eKYC.BaseView {
  public var delegate: eKYC.FaceDetectionDelegate?
  @objc override dynamic public func layoutSubviews()
  public func startProcess()
  @objc deinit
}
extension FaceDetectionView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public enum CardDetectionError {
  case CantPrepareCamera(error: Swift.String)
  case CantConvertImageToData
  case CantCalculateChecksum(error: Swift.String)
}
public enum PhotoSides {
  case firstSide
  case secondSide
  case finished
  public static func == (a: eKYC.PhotoSides, b: eKYC.PhotoSides) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CameraDetectionDelegate {
  func detectCardInfo(frontSide: eKYC.CroppedCard, backSide: eKYC.CroppedCard)
  func sendBackError(type: eKYC.CardDetectionError)
}
public typealias CroppedCard = (imageData: Foundation.Data?, image: UIKit.UIImage?)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CardDetectionView : eKYC.BaseView {
  public var delegate: eKYC.CameraDetectionDelegate?
  @objc override dynamic public func layoutSubviews()
  public func capturePhoto()
  @objc deinit
}
public protocol Message {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64Encoded base64String: Swift.String) throws
}
extension Message {
  public var base64String: Swift.String {
    get
  }
  public init(base64Encoded base64String: Swift.String) throws
}
public enum DigestAlgorithm {
  case md5
  case sha1
  case sha224
  case sha256
  case sha384
  case sha512
  public static func == (a: eKYC.DigestAlgorithm, b: eKYC.DigestAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class PublicKey : eKYC.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  public static func publicKeys(pemEncoded pemString: Swift.String) -> [eKYC.PublicKey]
  @objc deinit
}
extension Data {
  public func prependx509Header() -> Foundation.Data
  public func hasX509Header() throws -> Swift.Bool
  public func isAnHeaderlessKey() throws -> Swift.Bool
}
@objc(PublicKey) public class _objc_PublicKey : ObjectiveC.NSObject, eKYC.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: eKYC.PublicKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc public static func publicKeys(pemEncoded pemString: Swift.String) -> [eKYC._objc_PublicKey]
  @objc override dynamic public init()
  @objc deinit
}
@objc(PrivateKey) public class _objc_PrivateKey : ObjectiveC.NSObject, eKYC.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: eKYC.PrivateKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(VerificationResult) public class _objc_VerificationResult : ObjectiveC.NSObject {
  @objc final public let isSuccessful: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(ClearMessage) public class _objc_ClearMessage : ObjectiveC.NSObject, eKYC.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: eKYC.ClearMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(string: Swift.String, using rawEncoding: Swift.UInt) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func string(encoding rawEncoding: Swift.UInt) throws -> Swift.String
  @objc public func encrypted(with key: eKYC._objc_PublicKey, padding: eKYC.Padding) throws -> eKYC._objc_EncryptedMessage
  @objc public func signed(with key: eKYC._objc_PrivateKey, digestType: eKYC._objc_Signature.DigestType) throws -> eKYC._objc_Signature
  @objc public func verify(with key: eKYC._objc_PublicKey, signature: eKYC._objc_Signature, digestType: eKYC._objc_Signature.DigestType) throws -> eKYC._objc_VerificationResult
  @objc override dynamic public init()
  @objc deinit
}
@objc(EncryptedMessage) public class _objc_EncryptedMessage : ObjectiveC.NSObject, eKYC.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: eKYC.EncryptedMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func decrypted(with key: eKYC._objc_PrivateKey, padding: eKYC.Padding) throws -> eKYC._objc_ClearMessage
  @objc override dynamic public init()
  @objc deinit
}
@objc(Signature) public class _objc_Signature : ObjectiveC.NSObject {
  @objc public enum DigestType : Swift.Int {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: eKYC.Signature)
  @objc public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseView : UIKit.UIView {
  @objc deinit
}
extension UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
public class PrivateKey : eKYC.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
public typealias Padding = Security.SecPadding
public enum SwiftyRSA {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> (privateKey: eKYC.PrivateKey, publicKey: eKYC.PublicKey)
}
public protocol Key : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension Key {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
extension eKYC.UserSignError : Swift.Equatable {}
extension eKYC.UserSignError : Swift.Hashable {}
extension eKYC.UserSignError : Swift.RawRepresentable {}
extension eKYC.ChecksumError : Swift.Equatable {}
extension eKYC.ChecksumError : Swift.Hashable {}
extension eKYC.FaceCapturingError : Swift.Equatable {}
extension eKYC.FaceCapturingError : Swift.Hashable {}
extension eKYC.FaceCapturingError : Swift.RawRepresentable {}
extension eKYC.Directions : Swift.Equatable {}
extension eKYC.Directions : Swift.Hashable {}
extension eKYC.Directions : Swift.RawRepresentable {}
extension eKYC.Signature.DigestType : Swift.Equatable {}
extension eKYC.Signature.DigestType : Swift.Hashable {}
extension eKYC.FaceDetectionError : Swift.Equatable {}
extension eKYC.FaceDetectionError : Swift.Hashable {}
extension eKYC.FaceDetectionError : Swift.RawRepresentable {}
extension eKYC.PhotoSides : Swift.Equatable {}
extension eKYC.PhotoSides : Swift.Hashable {}
extension eKYC.DigestAlgorithm : Swift.Equatable {}
extension eKYC.DigestAlgorithm : Swift.Hashable {}
extension eKYC._objc_Signature.DigestType : Swift.Equatable {}
extension eKYC._objc_Signature.DigestType : Swift.Hashable {}
extension eKYC._objc_Signature.DigestType : Swift.RawRepresentable {}
